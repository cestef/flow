generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    login         String
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    canvases      Canvas[]
    members       Member[]
    invites       Invite[]

    @@map("users")
}

model Canvas {
    id        String   @id @default(cuid())
    name      String
    state     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String
    members   Member[]
    invites   Invite[]

    @@map("canvases")
}

model Member {
    id         String   @id @default(cuid())
    canvasId   String
    userId     String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    canvas     Canvas   @relation(fields: [canvasId], references: [id], onDelete: Cascade)
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    permission String   @default("view")

    @@map("members")
}

model Invite {
    id         String    @id @default(cuid())
    canvasId   String
    maxUses    Int       @default(1)
    uses       Int       @default(0)
    code       String    @unique
    permission String    @default("view")
    expires    DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    canvas     Canvas    @relation(fields: [canvasId], references: [id], onDelete: Cascade)
    creator    User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId  String
}
