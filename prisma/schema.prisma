// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String         @id @default(cuid())
    login         String         @unique
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    canvases      Canvas[]
    invitedTo     Canvas[]       @relation("InvitedTo")
    invites       Invite[]
    settings      UserSettings[]

    comments Comment[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Canvas {
    id        String    @id @default(cuid())
    name      String
    ownerId   String
    owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    members   User[]    @relation("InvitedTo")
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    nodes     Node[]    @relation("CanvasNodes")
    edges     Edge[]
    invites   Invite[]
    comments  Comment[]
}

model Node {
    id              String       @id @default(cuid())
    canvasId        String
    canvas          Canvas       @relation("CanvasNodes", fields: [canvasId], references: [id], onDelete: Cascade)
    name            String
    type            String
    handles         NodeHandle[]
    x               Float
    y               Float
    width           Float?
    height          Float?
    color           String?
    fontColor       String?
    fontSize        Float?
    fontWeight      String?
    fontFamily      String?
    borderRadius    Float?
    parentId        String?
    verticalAlign   String?
    horizontalAlign String?
    parent          Node?        @relation("Parent", fields: [parentId], references: [id])
    children        Node[]       @relation("Parent")
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    fromEdges       Edge[]       @relation("FromEdges")
    toEdges         Edge[]       @relation("ToEdges")
    comments        Comment[]
    preset          Boolean      @default(false)
}

model NodeHandle {
    id       String @id @default(cuid())
    nodeId   String
    node     Node   @relation(fields: [nodeId], references: [id], onDelete: Cascade)
    position String
    type     String
    outEdges Edge[] @relation("OutEdges")
    inEdges  Edge[] @relation("InEdges")
}

model Edge {
    id           String      @id @default(cuid())
    canvasId     String
    canvas       Canvas      @relation(fields: [canvasId], references: [id], onDelete: Cascade)
    type         String
    animated     Boolean     @default(false)
    fromId       String
    from         Node        @relation("FromEdges", fields: [fromId], references: [id], onDelete: Cascade)
    fromHandleId String?
    fromHandle   NodeHandle? @relation("OutEdges", fields: [fromHandleId], references: [id])
    toHandleId   String?
    toHandle     NodeHandle? @relation("InEdges", fields: [toHandleId], references: [id])
    toId         String
    to           Node        @relation("ToEdges", fields: [toId], references: [id], onDelete: Cascade)
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
}

model Comment {
    id        String   @id @default(cuid())
    canvasId  String
    canvas    Canvas   @relation(fields: [canvasId], references: [id], onDelete: Cascade)
    nodeId    String
    node      Node     @relation(fields: [nodeId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Invite {
    id        String    @id @default(cuid())
    code      String    @unique
    canvasId  String
    canvas    Canvas    @relation(fields: [canvasId], references: [id], onDelete: Cascade)
    maxUses   Int       @default(1)
    uses      Int       @default(0)
    user      User?     @relation(fields: [userId], references: [id])
    userId    String?
    expires   DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model UserSettings {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
