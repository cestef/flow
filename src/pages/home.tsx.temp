import { BackgroundStyled } from "@/components/flow/background";
import Panels from "@/components/flow/panels";
import { Button } from "@/components/ui/button";
import { Loader } from "@/components/ui/loader";
import { FIT_VIEW, NODE_NAMES, NODE_TYPES } from "@/lib/constants";
import { useCallbacks } from "@/lib/flow/handlers";
import { usePluvClient, usePluvConnection, usePluvStorage } from "@/lib/pluv/bundle";
import { useStore } from "@/lib/store";
import { Edge, Node, useStore as useStoreFlow } from "reactflow";

import { signIn, signOut, useSession } from "next-auth/react";
import { useEffect } from "react";
import ReactFlow, { Panel, useReactFlow, useStoreApi } from "reactflow";
import { y } from "@pluv/react";

export default function Home() {
	const { data: session, status } = useSession();
	const client = usePluvClient();
	const canvasId = useStore((state) => state.canvasId);
	useEffect(() => {
		if (client && canvasId) {
			const room = client.createRoom(canvasId, {
				debug: true,
				onAuthorizationFail(err) {
					console.log("Authorization failed", err);
				},
				initialStorage: () => ({
					nodes: y.array(),
					edges: y.array(),
					messages: y.array(),
				}),
			});
			room.connect().then(() => {
				room.subscribe("connection", (e) => {
					console.log("connection", e);
				});
			});
		}
	}, [client, canvasId]);

	const [nodes, sharedNodes] = usePluvStorage("nodes");
	const [edges, sharedEdges] = usePluvStorage("edges");
	const [messages, sharedMessages] = usePluvStorage("messages");

	const callbacks = useCallbacks(sharedNodes);
	const triggerChanges = useStoreFlow((e) => e.triggerNodeChanges);

	if (status === "loading") return <Loader />;
	return (
		<div className="h-[100svh]">
			<ReactFlow
				// nodes={nodes
				// 	.map((e) => {
				// 		const stateSelected = Array.from(awareness.states?.entries() ?? [])
				// 			.filter(
				// 				([id, state]) =>
				// 					id !== awareness.localID && state.selected?.includes(e.id)
				// 			)
				// 			.map(([_, state]) => state)[0];

				// 		return {
				// 			...e,
				// 			selected:
				// 				(awareness.localID &&
				// 					awareness.states
				// 						.get(awareness.localID)
				// 						?.selected?.includes(e.id)) ??
				// 				false,
				// 			data: {
				// 				...e.data,
				// 				borderColor: stateSelected?.color,
				// 			},
				// 		};
				// 	})
				// 	.concat(
				// 		Array.from(awareness.states?.entries() ?? [])
				// 			.filter(([id, state]) => id !== awareness.localID && state.x && state.y)
				// 			.map(([id, state]) => {
				// 				return {
				// 					id: id.toString(),
				// 					type: NODE_NAMES.CURSOR,
				// 					position: { x: state.x, y: state.y },
				// 					data: { color: state.color, grabbing: state.grabbing },
				// 				} as any;
				// 			})
				// 	)}
				nodes={(nodes ?? []) as Node[]}
				edges={(edges ?? []) as Edge[]}
				onNodesChange={callbacks.onNodesChange}
				nodeTypes={NODE_TYPES}
				fitView
				fitViewOptions={FIT_VIEW}
			>
				<BackgroundStyled />
				<Panel position="bottom-center">
					<div className="p-4 flex flex-col gap-4">
						<Button onClick={() => (session ? signOut() : signIn())}>
							{session ? "Sign Out" : "Sign In"}
						</Button>
						<Button
							onClick={() => {
								const id = Math.random().toString().slice(2);
								const x = Math.random() * 100;
								const y = Math.random() * 100;
								sharedMessages?.push([id]);
								triggerChanges([
									{
										type: "add",
										item: {
											id,
											type: NODE_NAMES.DEFAULT,
											position: { x, y },
											data: { label: id },
										},
									},
								]);
							}}
						>
							Add Node
						</Button>
						{session && (
							<p>
								Signed in as <b>{session.user.login}</b>
							</p>
						)}
					</div>
				</Panel>
				<Panels />
			</ReactFlow>
		</div>
	);
}
